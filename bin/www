#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketmovil:server');
var http = require('http');
var rxjs = require('rxjs');
var operators = require('rxjs/operators');
//var index = require('rxjs/index');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8887');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*** socket.io */

var io = require('socket.io')(server);
const mensajes = new rxjs.Subject();

io.on('connection', (socket) => {
  console.log('conexion a traves del canal general');
});

const canalMobil = io.of('/mobil')
canalMobil.on('connection', socket => {
  socket.on('moving', datos => mensajes.next(datos));
})

mensajes.pipe(
  operators.bufferTime(1000),
  operators.map(arr => Array.from(new Set(arr.map(c => c.nombre))).map(nombre => arr.find(e => e.nombre == nombre))),
  operators.map(arr => {
    let coords = arr.reduce((recolector, mobil) => {
      recolector.push({
        geometry: {
          coordinates: [mobil.longitud, mobil.latitud],
          type: 'Point'
        },
        type: 'Feature',
        properties: {
          nombre: mobil.nombre,
          aceleracion: mobil.aceleracion
        }
      });
      return recolector;
    }, [])

    return {
      type: 'FeatureCollection',
      features: coords
    };
  })
  //,operators.tap(info => console.log(JSON.stringify(info)))
).subscribe(dat => io.sockets.emit('process', JSON.stringify(dat)))

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
